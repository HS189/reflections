What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository, the .git file is added
	to the directory. You need to do this so you
	can use git on the files in that directory

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area is the intermediary between the
	working directory and the repository. It allows you
	to make more logical initial commits by separating distinct
	files in categorizations that make more sense for
	individual commits.

How can you use the staging area to make sure you have one commit per logical
change?
	You may make a bunch of changes, but you can add specific 
	ones to the staging area that are each their own
	logical change. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	When you start another part of the project, it may be useful
	to create a separate branch for it. That way, youâ€™ll
	be able to see where you branched off and why you did it.

How do the diagrams help you visualize the branch structure?
	They allow you to see how commits are related and how
	branches interact with each other.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	Merging two branches together combines the code from two different branches
	into one collection of files. When merging, the 
	commits from each branch become accessible, which is why
	we represent them the way we do.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Automatic versions may be quicker and easier than
	manual ones. However, git cannot anticipate all
	conflicts and know how to resolve them, so manual commits
	allows the user, who is the expert, to merge the files
	in the most logical way.
